Traceback (most recent call last):
  File "/Users/ajaiupadhyaya/Documents/intmacro/venv/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/Users/ajaiupadhyaya/Documents/intmacro/venv/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/Users/ajaiupadhyaya/Documents/intmacro/venv/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/asyncio/base_events.py", line 719, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/Users/ajaiupadhyaya/Documents/intmacro/venv/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/Users/ajaiupadhyaya/Documents/intmacro/venv/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/ajaiupadhyaya/Documents/intmacro/venv/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Import necessary libraries
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns  
from ipywidgets import interact, FloatSlider, Checkbox
from IPython.display import display, Markdown
import matplotlib

# Set Seaborn theme
sns.set_theme(style="whitegrid", context="notebook")

#stylings
plt.rcParams.update({
    "axes.edgecolor": "#333333",
    "axes.labelcolor": "#333333",
    "axes.titlesize": 14,
    "axes.titleweight": "bold",
    "axes.labelsize": 12,
    "figure.facecolor": "#f9f9f9",
    "grid.color": "#d9d9d9",
    "xtick.color": "#444444",
    "ytick.color": "#444444",
    "font.family": "DejaVu Sans",
})

# Set font (optional good measure)
matplotlib.rcParams['font.family'] = 'DejaVu Sans'
matplotlib.rcParams['axes.unicode_minus'] = False

# Utility function
def two_period_utility_log(c1, c2, beta=1.0):
    epsilon = 1e-9
    c1 = max(c1, epsilon)
    c2 = max(c2, epsilon)
    if c1 <= 0 or c2 <= 0:
        return -np.inf
    return np.log(c1) + beta * np.log(c2)

# Main Plotting Function
def plot_two_period_log(y1=100, y2=100, r=0.05, beta=1.0, compare=False):
    fig, ax = plt.subplots(figsize=(8, 7))
    epsilon = 1e-9

    y1 = max(y1, 0)
    y2 = max(y2, 0)
    r = max(r, -0.99)
    beta = max(beta, epsilon)

    W = y1 + y2 / (1 + r) if abs(1 + r) >= epsilon else np.inf
    if W == np.inf or (1 + beta) < epsilon:
        c1_star = epsilon
        c2_star = epsilon
    else:
        c1_star = W / (1 + beta)
        c2_star = beta * (1 + r) * c1_star

    c1_star = max(c1_star, epsilon)
    c2_star = max(c2_star, epsilon)
    U_star = two_period_utility_log(c1_star, c2_star, beta)
    saving = y1 - c1_star

    c1_max_plot = max(W, y1, c1_star, epsilon) * 1.2
    c2_max_plot = max((1 + r) * W, y2, c2_star, epsilon) * 1.2

    # Budget constraint
    if abs(1 + r) < epsilon:
        ax.axvline(y1, color='black', linestyle='-')
    else:
        c1_bc = np.linspace(epsilon, c1_max_plot, 300)
        c2_bc = (1 + r) * (W - c1_bc)
        ax.plot(c1_bc[c2_bc >= 0], c2_bc[c2_bc >= 0], label=f"Budget Line (r={r:.2f})", color='black', linewidth=2)

    # Indifference curve
    c1_vals = np.linspace(epsilon, c1_max_plot, 300)
    if beta > epsilon and U_star > -np.inf:
        with np.errstate(divide='ignore', invalid='ignore'):
            u_curve = np.exp((U_star - np.log(c1_vals)) / beta)
        ax.plot(c1_vals[(u_curve > 0) & (u_curve < c2_max_plot)], u_curve[(u_curve > 0) & (u_curve < c2_max_plot)],
                linestyle='--', color='crimson', label="Indifference Curve")

    # Plot Optimal
    ax.scatter(c1_star, c2_star, color='crimson', s=100, label="Optimal (c1*, c2*)")
    ax.scatter(y1, y2, color='green', marker='X', s=100, label="Endowment (y1, y2)")

    # Saving/Borrowing Arrow
    if abs(saving) > epsilon * 100:
        ax.arrow(y1, y2, c1_star - y1, c2_star - y2,
                 color='blue', linestyle=':', length_includes_head=True,
                 head_width=0.03 * c1_max_plot, head_length=0.03 * c2_max_plot, alpha=0.7)

    # Compare if asked
    if compare:
        for r_cmp in [r * 0.5, r * 1.5, r * 2.0]:
            if r_cmp <= -1 or abs(r_cmp - r) < 0.01:
                continue
            W_cmp = y1 + y2 / (1 + r_cmp)
            if W_cmp == np.inf or (1 + beta) < epsilon:
                continue
            c1_cmp = W_cmp / (1 + beta)
            c2_cmp = beta * (1 + r_cmp) * c1_cmp
            ax.scatter(c1_cmp, c2_cmp, alpha=0.5, marker='o', s=60, label=f"Optimal if r={r_cmp:.2f}")

    # Formatting
    ax.set_xlabel("Consumption Today (c1)")
    ax.set_ylabel("Consumption Tomorrow (c2)")
    ax.set_xlim(0, c1_max_plot)
    ax.set_ylim(0, c2_max_plot)
    ax.set_title(f"Two-Period Consumption Model (β={beta:.2f})", fontsize=16)
    ax.legend(fontsize='small')
    sns.despine()
    plt.tight_layout()
    plt.show()

    # Markdown Summary
    saving_status = "Saver" if saving > epsilon else ("Borrower" if saving < -epsilon else "Neither")
    euler_lhs = 1/c1_star if c1_star > epsilon else np.inf
    euler_rhs = beta * (1 + r) * (1/c2_star if c2_star > epsilon else np.inf)
    euler_check = "✅" if np.isclose(euler_lhs, euler_rhs, rtol=1e-3) else "❌"

    results_md = rf"""
    ### 📊 Live Results

    * **Lifetime Wealth (W):** ${y1:.1f} + \frac{{{y2:.1f}}}{{1 + {r:.2f}}} = {W:.2f}$
    * **Optimal Bundle:** $(c_1^*, c_2^*) = ({c1_star:.2f}, {c2_star:.2f})$
    * **Resulting Utility:** $U^* = {U_star:.3f}$
    * **Saving Decision:** $s = y_1 - c_1^* = {y1:.1f} - {c1_star:.2f} = {saving:.2f}$ ({saving_status})
    * **Euler Equation Check:** $\frac{{1}}{{c_1^*}} \approx \beta (1+r) \frac{{1}}{{c_2^*}}$ {euler_check}
    """
    display(Markdown(results_md))

# Interact
interact(
    plot_two_period_log,
    y1=FloatSlider(min=0, max=250, step=10, value=100, description='Income Today (y₁)'),
    y2=FloatSlider(min=0, max=250, step=10, value=100, description='Income Future (y₂)'),
    r=FloatSlider(min=-0.5, max=0.5, step=0.01, value=0.05, description='Interest Rate (r)'),
    beta=FloatSlider(min=0.8, max=1.2, step=0.01, value=1.0, description='Discount Factor (β)'),
    compare=Checkbox(value=False, description="Compare Rates")
)
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[2][39m[32m, line 4[39m
[32m      2[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mnp[39;00m
[32m      3[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mmatplotlib[39;00m[34;01m.[39;00m[34;01mpyplot[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mplt[39;00m
[32m----> [39m[32m4[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mseaborn[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01msns[39;00m  
[32m      5[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mipywidgets[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m interact, FloatSlider, Checkbox
[32m      6[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mIPython[39;00m[34;01m.[39;00m[34;01mdisplay[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m display, Markdown

[31mModuleNotFoundError[39m: No module named 'seaborn'

